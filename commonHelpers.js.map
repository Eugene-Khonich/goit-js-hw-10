{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\n\nconst datePicker = document.querySelector('#datetime-picker');\nconst btn = document.querySelector('[data-start]');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minValue = document.querySelector('[data-minutes]');\nconst secValue = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = [];\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    dateCheck(selectedDates);\n  },\n};\n\nflatpickr(datePicker, options);\n\nconst dateCheck = selectedDates => {\n  if (Date.now() < selectedDates[0].getTime()) {\n    userSelectedDate = selectedDates[0];\n    btn.removeAttribute('disabled');\n  } else {\n    btn.setAttribute('disabled', '');\n    iziToast.error({\n      title: 'Error',\n      message: 'Please choose a date in the future',\n      position: 'topRight',\n    });\n  }\n};\n\nconst startBtn = () => {\n  const userSelectedDateInMs = userSelectedDate.getTime();\n  btn.setAttribute('disabled', '');\n  datePicker.setAttribute('disabled', '');\n\n  const interval = setInterval(() => {\n    if (userSelectedDateInMs >= Date.now()) {\n      const convertMs = ms => {\n        const second = 1000;\n        const minute = second * 60;\n        const hour = minute * 60;\n        const day = hour * 24;\n        const days = addLeadingZero(Math.floor(ms / day));\n        const hours = addLeadingZero(Math.floor((ms % day) / hour));\n        const minutes = addLeadingZero(\n          Math.floor(((ms % day) % hour) / minute)\n        );\n        const seconds = addLeadingZero(\n          Math.floor((((ms % day) % hour) % minute) / second)\n        );\n        daysValue.textContent = days;\n        hoursValue.textContent = hours;\n        minValue.textContent = minutes;\n        secValue.textContent = seconds;\n        return { days, hours, minutes, seconds };\n      };\n      convertMs(userSelectedDateInMs - Date.now());\n    } else {\n      clearInterval(interval);\n      datePicker.removeAttribute('disabled');\n    }\n  }, 1000);\n};\n\nconst addLeadingZero = value => {\n  return String(value).padStart(2, '0');\n};\n\nbtn.addEventListener('click', startBtn);\n"],"names":["datePicker","btn","daysValue","hoursValue","minValue","secValue","userSelectedDate","options","selectedDates","dateCheck","flatpickr","iziToast","startBtn","userSelectedDateInMs","interval","ms","days","addLeadingZero","hours","minutes","seconds","value"],"mappings":"+IAGA,MAAMA,EAAa,SAAS,cAAc,kBAAkB,EACtDC,EAAM,SAAS,cAAc,cAAc,EAC3CC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAW,SAAS,cAAc,gBAAgB,EAClDC,EAAW,SAAS,cAAc,gBAAgB,EAExD,IAAIC,EAAmB,CAAA,EAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBC,EAAUD,CAAa,CACxB,CACH,EAEAE,EAAUV,EAAYO,CAAO,EAE7B,MAAME,EAAYD,GAAiB,CAC7B,KAAK,IAAK,EAAGA,EAAc,CAAC,EAAE,WAChCF,EAAmBE,EAAc,CAAC,EAClCP,EAAI,gBAAgB,UAAU,IAE9BA,EAAI,aAAa,WAAY,EAAE,EAC/BU,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAChB,CAAK,EAEL,EAEMC,EAAW,IAAM,CACrB,MAAMC,EAAuBP,EAAiB,UAC9CL,EAAI,aAAa,WAAY,EAAE,EAC/BD,EAAW,aAAa,WAAY,EAAE,EAEtC,MAAMc,EAAW,YAAY,IAAM,CAC7BD,GAAwB,KAAK,OACbE,GAAM,CAKtB,MAAMC,EAAOC,EAAe,KAAK,MAAMF,EAAK,KAAG,CAAC,EAC1CG,EAAQD,EAAe,KAAK,MAAOF,EAAK,MAAO,IAAI,CAAC,EACpDI,EAAUF,EACd,KAAK,MAAQF,EAAK,MAAO,KAAQ,GAAM,CACjD,EACcK,EAAUH,EACd,KAAK,MAASF,EAAK,MAAO,KAAQ,IAAU,GAAM,CAC5D,EACQ,OAAAb,EAAU,YAAcc,EACxBb,EAAW,YAAce,EACzBd,EAAS,YAAce,EACvBd,EAAS,YAAce,EAChB,CAAE,KAAAJ,EAAM,MAAAE,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC9C,GACgBP,EAAuB,KAAK,IAAK,CAAA,GAE3C,cAAcC,CAAQ,EACtBd,EAAW,gBAAgB,UAAU,EAExC,EAAE,GAAI,CACT,EAEMiB,EAAiBI,GACd,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,EAGtCpB,EAAI,iBAAiB,QAASW,CAAQ"}